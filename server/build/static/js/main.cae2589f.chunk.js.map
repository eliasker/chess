{"version":3,"sources":["context/Context.js","Constants.js","components/Player.js","components/GameOver.js","components/ConfirmButton.js","components/Status.js","components/Game.js","components/CreateGameButton.js","components/GameList.js","service/SocketHook.js","components/ErrorMessage.js","App.js","index.js"],"names":["Context","createContext","fen","initialPlayer","time","score","id","username","color","initialGameroom","state","winner","host","player","connections","Player","className","slice","GameOver","game","user","handleReset","gameoverText","onClick","ConfirmButton","disable","description","buttonName","acceptFunction","useState","open","setOpen","handleClickAway","ClickAwayListener","onClickAway","style","marginLeft","disabled","GameStatus","status","turn","isMyTurn","check","in_check","Chess","Game","selectedGame","emitState","emitLeave","emitEnd","useContext","setSelectedGame","emitRematch","setErrorMessage","position","setPosition","setStatus","userID","split","useEffect","load","over","game_over","draw","in_draw","in_check_mate","in_checkmate","e","broadcastFen","handleMove","move","imPlayer","imHost","width","orientation","onDrop","from","sourceSquare","to","targetSquare","promotion","Status","rematch","reset","CreateGameButton","emitCreateGame","handleCreate","a","randomColor","Math","random","newHost","newGameRoom","uuidv4","success","message","GameList","selectedID","games","emitJoin","Object","keys","length","map","gameID","spectate","join","SocketHook","connectedUsers","setConnectedUsers","currentGames","setCurrentGames","gameUpdate","setGameUpdate","socket","useRef","current","socketIOClient","emit","on","newUserList","newGameList","updatedGame","error","disconnect","Promise","resolve","response","successful","newState","isPlayer","result","ErrorMessage","errorMessage","Snackbar","anchorOrigin","vertical","horizontal","Alert","onClose","severity","App","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cae2589f.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nconst Context = createContext()\r\n\r\nexport default Context\r\n","export const fen = {\r\n  startingPosition: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\r\n}\r\n\r\nexport const initialPlayer = {\r\n  time: 0,\r\n  score: 0,\r\n  id: null,\r\n  username: null,\r\n  color: ''\r\n}\r\n\r\nexport const initialGameroom = {\r\n  id: null,\r\n  state: fen.startingPosition,\r\n  winner: null,\r\n  host: initialPlayer,\r\n  player: initialPlayer,\r\n  connections: []\r\n}\r\n","import React from 'react'\r\n\r\nconst Player = ({ id, score }) => {\r\n  return (\r\n    <div className='opposite-container'>\r\n      {id === null ? <p>No opponent connected</p> : <p>Guest#{id.slice(0, 4)}</p>}\r\n      <p>Score: {score}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\n\r\nconst GameOver = ({ game, user, handleReset }) => {\r\n  const gameoverText = `Game over: ${game.winner === 'draw' ? 'draw'\r\n    : (game.winner === user.username ? 'You won' : 'You lost')}`\r\n  return (\r\n    <>{game.winner === null ? null\r\n      : <>\r\n        <p>{gameoverText}</p>\r\n        <button onClick={() => handleReset(true)}>Rematch</button>\r\n        </>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GameOver\r\n","import React, { useState } from 'react'\r\nimport { ClickAwayListener } from '@material-ui/core'\r\n\r\nconst ConfirmButton = ({ disable, description, buttonName, acceptFunction }) => {\r\n  const [open, setOpen] = useState(false)\r\n  const handleClickAway = () => setOpen(false)\r\n  const handleClick = () => setOpen(!open)\r\n  const handleConfirm = () => {\r\n    handleClickAway()\r\n    acceptFunction()\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <div>\r\n        {open ?\r\n          <span>\r\n            {description}\r\n            <button onClick={handleClickAway} style={{ marginLeft: 10 }}>\r\n              Cancel</button>\r\n            <button onClick={handleConfirm}>Confirm</button>\r\n          </span>\r\n          :\r\n          <button disabled={disable} onClick={handleClick}>{buttonName}</button>\r\n        }\r\n      </div>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n\r\nexport default ConfirmButton\r\n","import React from 'react'\r\n\r\nconst GameStatus = ({ status }) => {\r\n  const turn = status.isMyTurn ? 'Your turn' :\r\n    (status.turn === 'w' ? 'Turn: white' : 'Turn: black')\r\n  const check = status.in_check ? ', in check' : null\r\n  return (\r\n    <>\r\n      <p>{turn}{check}</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GameStatus\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport Chess from 'chess.js'\r\nimport Chessboard from 'chessboardjsx'\r\n\r\nimport Context from '../context/Context'\r\nimport { fen, initialGameroom } from '../Constants'\r\nimport Player from './Player'\r\nimport GameOver from './GameOver'\r\nimport ConfirmButton from './ConfirmButton'\r\nimport Status from './Status'\r\n\r\nconst game = new Chess()\r\n\r\nconst Game = ({ selectedGame, emitState, emitLeave, emitEnd }) => {\r\n  const { user, setSelectedGame, emitRematch, setErrorMessage } = useContext(Context)\r\n  const [position, setPosition] = useState(fen.startingPosition)\r\n  const [status, setStatus] = useState({})\r\n\r\n  const isMyTurn = () => {\r\n    if (user.userID === selectedGame.host.id) {\r\n      return selectedGame.host.color.split('')[0] === game.turn()\r\n    } else if (user.userID === selectedGame.player.id) {\r\n      return selectedGame.player.color.split('')[0] === game.turn()\r\n    }\r\n    return false\r\n  }\r\n\r\n  const updateStatus = () => {\r\n    return {\r\n      isMyTurn: isMyTurn(),\r\n      turn: game.turn(),\r\n      over: game.game_over(),\r\n      draw: game.in_draw(),\r\n      in_check: game.in_check(),\r\n      in_check_mate: game.in_checkmate()\r\n    }\r\n  }\r\n\r\n  // useEffect that updates gameboard when selected game is changed\r\n  useEffect(() => {\r\n    try {\r\n      game.load(selectedGame.state)\r\n      setPosition(game.fen())\r\n      setStatus(updateStatus())\r\n    } catch (e) {\r\n      setErrorMessage('Failed to load boardstate')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedGame])\r\n\r\n  const broadcastFen = fen => {\r\n    emitState(selectedGame.id, fen)\r\n  }\r\n\r\n  const handleReset = (rematch) => {\r\n    game.reset()\r\n    setPosition(game.fen())\r\n    broadcastFen(game.fen())\r\n    if (rematch) emitRematch(selectedGame.id)\r\n  }\r\n\r\n  const handleMove = (move) => {\r\n    if (isMyTurn() && game.move(move)) {\r\n      setPosition(game.fen())\r\n      broadcastFen(game.fen())\r\n      if (game.game_over()) {\r\n        if (game.in_draw()) {\r\n          emitEnd(selectedGame.id, user.userID, 'draw')\r\n        } else {\r\n          emitEnd(selectedGame.id, user.userID, 'win')\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const leaveGame = () => {\r\n    emitLeave(user.userID, selectedGame.id)\r\n    setSelectedGame(initialGameroom)\r\n  }\r\n\r\n  const imPlayer = () => selectedGame.player.id === user.userID\r\n  const imHost = () => selectedGame.host.id === user.userID\r\n\r\n  const handleSurrender = () => {\r\n    if (game.fen() === fen.startingPosition && !game.game_over()) return\r\n    if ((imHost() || imPlayer()) && selectedGame.winner === null) {\r\n      emitEnd(selectedGame.id, user.userID, 'loss')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className='center-container'>\r\n      <div>\r\n        {(selectedGame.id === null)\r\n          ? <p>No game selected</p>\r\n          : <>\r\n            <p>{`Game#${selectedGame.id.slice(0, 4)}`}</p>\r\n\r\n            {(imHost() || imPlayer())\r\n              ? <ConfirmButton disable={false} description='Leave game?' buttonName='Leave game' acceptFunction={leaveGame} />\r\n              : null}\r\n\r\n            {imPlayer()\r\n              ? <>\r\n                <Player id={selectedGame.host.id} score={selectedGame.host.score} />\r\n                <Chessboard\r\n                  width={400} position={position}\r\n                  orientation={selectedGame.player.color}\r\n                  onDrop={(move) =>\r\n                    handleMove({\r\n                      from: move.sourceSquare,\r\n                      to: move.targetSquare,\r\n                      promotion: 'q'\r\n                    })}\r\n                />\r\n                <Player id={selectedGame.player.id} score={selectedGame.player.score} />\r\n              </>\r\n              : <>\r\n                <Player id={selectedGame.player.id} score={selectedGame.player.score} />\r\n                <Chessboard\r\n                  width={400} position={position}\r\n                  orientation={selectedGame.host.color}\r\n                  onDrop={(move) =>\r\n                    handleMove({\r\n                      from: move.sourceSquare,\r\n                      to: move.targetSquare,\r\n                      promotion: 'q'\r\n                    })}\r\n                />\r\n                <Player id={selectedGame.host.id} score={selectedGame.host.score} />\r\n              </>}\r\n\r\n            {(imHost() || imPlayer())\r\n              ? <ConfirmButton disable={position === fen.startingPosition} description='Surrender?' buttonName='Surrender' acceptFunction={handleSurrender} />\r\n              : null}\r\n            <Status status={status} />\r\n            <GameOver game={selectedGame} user={user} handleReset={handleReset} />\r\n          </>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","import React, { useContext } from 'react'\r\nimport Context from '../context/Context'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { initialPlayer, initialGameroom } from '../Constants'\r\n\r\nconst CreateGameButton = () => {\r\n  const {\r\n    user,\r\n    setSelectedGame,\r\n    emitCreateGame,\r\n    setErrorMessage\r\n  } = useContext(Context)\r\n\r\n  const handleCreate = async () => {\r\n    const randomColor = Math.random() > 0.5 ? 'white' : 'black'\r\n\r\n    const newHost = { ...initialPlayer, id: user.userID, username: user.username, color: randomColor }\r\n    const newGameRoom = { ...initialGameroom, id: uuidv4(), host: newHost }\r\n\r\n    const { success, message } = await emitCreateGame(newGameRoom)\r\n    success ? setSelectedGame(newGameRoom) : setErrorMessage(message)\r\n  }\r\n\r\n  return (\r\n    <div className='create-game'>\r\n      <button onClick={() => handleCreate()}>Create game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateGameButton\r\n","import React, { useContext } from 'react'\r\n\r\nimport Context from '../context/Context'\r\nimport CreateGameButton from './CreateGameButton'\r\n\r\n// TODO: num of players joined and spectating\r\n// if those are not null allow only joining as spectator\r\nconst GameList = ({ selectedID, games, emitJoin }) => {\r\n  const { user, setSelectedGame } = useContext(Context)\r\n\r\n  const spectate = (gameID) => {\r\n    if (games[gameID].host.id !== user.userID) {\r\n      emitJoin(user, gameID, false)\r\n    }\r\n    setSelectedGame(games[gameID])\r\n  }\r\n\r\n  const join = (gameID) => {\r\n    if (games[gameID].player.id === null) {\r\n      emitJoin(user, gameID, true)\r\n    }\r\n    setSelectedGame(games[gameID])\r\n  }\r\n\r\n  return (\r\n    <div className='game-list'>\r\n      <CreateGameButton />\r\n      {Object.keys(games).length === 0\r\n        ? <p>No ongoing games</p>\r\n        : <ul>\r\n          {Object.keys(games).map((gameID) =>\r\n            <li\r\n              key={gameID}\r\n              className={`${gameID === selectedID ? 'highlight clickable' : 'clickable'}`}\r\n              onClick={() => spectate(gameID)}\r\n            >\r\n              Game#{gameID.slice(0, 4)}\r\n              <>\r\n                {(games[gameID].host.id !== user.userID && games[gameID].player.id === null)\r\n                  ? <button onClick={() => join(gameID)}>Join</button> : null}\r\n              </>\r\n            </li>\r\n          )}\r\n        </ul>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameList\r\n","import { useRef, useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport { initialGameroom } from '../Constants'\r\n\r\nconst ENDPOINT = 'http://localhost:3001/'\r\n\r\n/**\r\n * Custom hook that handles moving data between client and server,\r\n * stores and updates states that contain users and games.\r\n */\r\nconst SocketHook = (userID, username, setErrorMessage) => {\r\n  const [connectedUsers, setConnectedUsers] = useState([])\r\n  const [currentGames, setCurrentGames] = useState([])\r\n  const [gameUpdate, setGameUpdate] = useState(initialGameroom)\r\n  const socket = useRef()\r\n\r\n  /**\r\n   * useEffect that handles receiving events from the server\r\n   * and updating relevant states after receiving event.\r\n   * Used endpoint depends if application was ran with 'chess-client> react-scripts start' (development) \r\n   * or with 'server> node index.js' (production) that uses files from server/build folder\r\n   */\r\n  useEffect(() => {\r\n    socket.current = process.env.NODE_ENV === 'development' ? socketIOClient(ENDPOINT) : socketIOClient()\r\n    socket.current.emit('join server', { userID: userID, username: username })\r\n\r\n    socket.current.on('update users', newUserList => {\r\n      setConnectedUsers(newUserList)\r\n    })\r\n\r\n    socket.current.on('update games', (newGameList) => {\r\n      setCurrentGames(newGameList)\r\n    })\r\n\r\n    /**\r\n     * 'game update' is only sent to users that whose socket is connected to that game\r\n     * i.e. user is host or at some point joined/spectated the game\r\n     */\r\n    socket.current.on('game update', (updatedGame) => {\r\n      setGameUpdate(updatedGame)\r\n    })\r\n\r\n    socket.current.on('connect_error', error => {\r\n      setErrorMessage('Connection to server failed')\r\n    })\r\n\r\n    return () => { socket.current.disconnect() }\r\n  }, [userID, username, setErrorMessage])\r\n\r\n  /**\r\n   * Create game sends newGameRoom object to server\r\n   * Server responses if creation was succesful\r\n   * @param {gameRoom} newGameRoom\r\n   * @returns {Promise} resolve handles response from server\r\n   */\r\n  const emitCreateGame = (newGameRoom) => {\r\n    return new Promise((resolve) => {\r\n      socket.current.emit('create game', newGameRoom, (response) => {\r\n        resolve({ success: response.successful, message: response.message })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Functions that send events to the server\r\n   */\r\n  const emitState = (gameID, newState) => {\r\n    socket.current.emit('move', gameID, newState)\r\n  }\r\n\r\n  const emitJoin = (user, gameID, isPlayer) => {\r\n    socket.current.emit('join game', user, gameID, isPlayer)\r\n  }\r\n\r\n  const emitRematch = (gameID) => {\r\n    socket.current.emit('new game', gameID)\r\n  }\r\n\r\n  const emitLeave = (userID, gameID) => {\r\n    socket.current.emit('leave game', userID, gameID)\r\n  }\r\n\r\n  const emitEnd = (gameID, userID, result) => {\r\n    socket.current.emit('game over', gameID, userID, result)\r\n  }\r\n\r\n  return {\r\n    connectedUsers,\r\n    currentGames,\r\n    emitCreateGame,\r\n    emitState,\r\n    gameUpdate,\r\n    emitJoin,\r\n    emitRematch,\r\n    emitLeave,\r\n    emitEnd\r\n  }\r\n}\r\n\r\nexport default SocketHook\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core'\r\nimport { Alert } from '@material-ui/lab'\r\n\r\nconst ErrorMessage = ({ errorMessage, setErrorMessage }) => {\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        open={errorMessage !== ''}\r\n      >\r\n        <Alert onClose={() => setErrorMessage('')} severity='error'>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport Context from './context/Context'\r\nimport Game from './components/Game'\r\nimport './styles/App.css'\r\nimport GameList from './components/GameList'\r\nimport SocketHook from './service/SocketHook'\r\nimport { initialGameroom } from './Constants'\r\nimport ErrorMessage from './components/ErrorMessage'\r\nconst id = uuidv4()\r\nconst user = { userID: id, username: `Guest#${id.slice(0, 4)}` }\r\n\r\nconst App = () => {\r\n  const [selectedGame, setSelectedGame] = useState(initialGameroom)\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n\r\n  const {\r\n    connectedUsers,\r\n    currentGames,\r\n    emitCreateGame,\r\n    emitState,\r\n    gameUpdate,\r\n    emitJoin,\r\n    emitRematch,\r\n    emitLeave,\r\n    emitEnd\r\n  } = SocketHook(user.userID, user.username, setErrorMessage)\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (gameUpdate.id === selectedGame.id) {\r\n        setSelectedGame(gameUpdate)\r\n      }\r\n    } catch (e) { }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [gameUpdate])\r\n\r\n  return (\r\n    <Context.Provider value={{ user, setSelectedGame, emitCreateGame, emitRematch, setErrorMessage }}>\r\n      <div className='grid-container'>\r\n        <div className='icon' />\r\n        <div className='user'>\r\n          <p>logged in as {user.username}</p>\r\n          <p>players online: {Object.keys(connectedUsers).length}</p>\r\n        </div>\r\n\r\n        <GameList selectedID={selectedGame.id} games={currentGames} emitJoin={emitJoin} />\r\n\r\n        <Game\r\n          selectedGame={selectedGame}\r\n          emitState={emitState}\r\n          emitLeave={emitLeave}\r\n          emitEnd={emitEnd}\r\n        />\r\n        <ErrorMessage errorMessage={errorMessage} setErrorMessage={setErrorMessage} />\r\n      </div>\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}