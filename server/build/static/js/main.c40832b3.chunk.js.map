{"version":3,"sources":["context/Context.js","Constants.js","components/Player.js","components/GameOver.js","components/ConfirmButton.js","components/Game.js","components/CreateGameButton.js","components/GameList.js","service/SocketHook.js","components/ErrorMessage.js","App.js","index.js"],"names":["Context","createContext","fen","initialPlayer","time","score","id","username","color","initialGameroom","state","winner","host","player","connections","Player","className","slice","GameOver","game","user","handleReset","gameoverText","onClick","useStyles","makeStyles","theme","root","position","dropdown","top","right","left","zIndex","border","padding","spacing","backgroundColor","palette","background","paper","ConfirmButton","description","buttonName","acceptFunction","classes","useState","open","setOpen","handleClickAway","ClickAwayListener","onClickAway","Chess","Game","selectedGame","emitState","emitLeave","emitEnd","useContext","setSelectedGame","emitRematch","setErrorMessage","setPosition","useEffect","load","e","broadcastFen","handleMove","move","userID","split","turn","game_over","in_draw","imPlayer","imHost","width","orientation","onDrop","from","sourceSquare","to","targetSquare","promotion","rematch","reset","CreateGameButton","emitCreateGame","handleCreate","a","randomColor","Math","random","newHost","newGameRoom","uuidv4","success","message","GameList","selectedID","games","emitJoin","Object","keys","length","map","gameID","spectate","join","SocketHook","connectedUsers","setConnectedUsers","currentGames","setCurrentGames","gameUpdate","setGameUpdate","socket","useRef","current","socketIOClient","emit","on","newUserList","newGameList","updatedGame","error","disconnect","Promise","resolve","response","successful","newState","isPlayer","result","ErrorMessage","errorMessage","Snackbar","anchorOrigin","vertical","horizontal","Alert","onClose","severity","App","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"uKAIeA,EAFCC,0B,kCCFHC,EACO,2DAGPC,EAAgB,CAC3BC,KAAM,EACNC,MAAO,EACPC,GAAI,KACJC,SAAU,KACVC,MAAO,IAGIC,EAAkB,CAC7BH,GAAI,KACJI,MAAOR,EACPS,OAAQ,KACRC,KAAMT,EACNU,OAAQV,EACRW,YAAa,I,OCPAC,EATA,SAAC,GAAmB,IAAjBT,EAAgB,EAAhBA,GAAID,EAAY,EAAZA,MACpB,OACE,sBAAKW,UAAU,qBAAf,UACU,OAAPV,EAAc,sDAA+B,uCAAUA,EAAGW,MAAM,EAAG,MACpE,wCAAWZ,SCSFa,EAbE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACxBC,EAAY,qBAAiC,SAAhBH,EAAKR,OAAoB,OACvDQ,EAAKR,SAAWS,EAAKb,SAAW,UAAY,YACjD,OACE,mCAAmB,OAAhBY,EAAKR,OAAkB,KACtB,qCACA,4BAAIW,IACJ,wBAAQC,QAAS,kBAAMF,GAAY,IAAnC,2B,kBCLFG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,YAEZC,SAAU,CACRC,IAAK,GACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,OAAQ,YACRC,QAAST,EAAMU,QAAQ,GACvBC,gBAAiBX,EAAMY,QAAQC,WAAWC,WAwB/BC,EApBO,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,eAC1CC,EAAUrB,IADqD,EAE7CsB,oBAAS,GAFoC,mBAE9DC,EAF8D,KAExDC,EAFwD,KAG/DC,EAAkB,kBAAMD,GAAQ,IAOtC,OACE,cAACE,EAAA,EAAD,CAAmBC,YAAaF,EAAhC,SACE,sBAAKjC,UAAW6B,EAAQlB,KAAxB,UACE,wBAAQJ,QATM,kBAAMyB,GAASD,IAS7B,SAA+BJ,IAC9BI,EAAQ,sBAAK/B,UAAW6B,EAAQhB,SAAxB,UAAmCa,EAAY,wBAAQnB,QAAS0B,EAAjB,oBAAiD,wBAAQ1B,QATjG,WACpB0B,IACAL,KAO6G,wBAA0D,WCvBrKzB,EAAO,IAAIiC,IAuHFC,EArHF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAAc,EACAC,qBAAW1D,GAAnEoB,EADwD,EACxDA,KAAMuC,EADkD,EAClDA,gBAAiBC,EADiC,EACjCA,YAAaC,EADoB,EACpBA,gBADoB,EAEhCf,mBAAS5C,GAFuB,mBAEzD0B,EAFyD,KAE/CkC,EAF+C,KAchEC,qBAAU,WACR,IACE5C,EAAK6C,KAAKV,EAAa5C,OACvBoD,EAAY3C,EAAKjB,OACjB,MAAO+D,GACPJ,EAAgB,gCAGjB,CAACP,IAEJ,IAAMY,EAAe,SAAAhE,GACnBqD,EAAUD,EAAahD,GAAIJ,IAUvBiE,EAAa,SAACC,IA9BdhD,EAAKiD,SAAWf,EAAa1C,KAAKN,GAC7BgD,EAAa1C,KAAKJ,MAAM8D,MAAM,IAAI,KAAOnD,EAAKoD,OAC5CnD,EAAKiD,SAAWf,EAAazC,OAAOP,IACtCgD,EAAazC,OAAOL,MAAM8D,MAAM,IAAI,KAAOnD,EAAKoD,SA4BvCpD,EAAKiD,KAAKA,KAC1BN,EAAY3C,EAAKjB,OACjBgE,EAAa/C,EAAKjB,OACdiB,EAAKqD,cACHrD,EAAKsD,UACPhB,EAAQH,EAAahD,GAAIc,EAAKiD,OAAQ,QAEtCZ,EAAQH,EAAahD,GAAIc,EAAKiD,OAAQ,UAWxCK,EAAW,kBAAMpB,EAAazC,OAAOP,KAAOc,EAAKiD,QACjDM,EAAS,kBAAMrB,EAAa1C,KAAKN,KAAOc,EAAKiD,QASnD,OACE,qBAAKrD,UAAU,mBAAf,SACE,8BACwB,OAApBsC,EAAahD,GACX,iDACA,qCACA,2CAAYgD,EAAahD,GAAGW,MAAM,EAAG,MAEnC0D,KAAYD,IACV,cAAC,EAAD,CAAehC,YAAY,cAAcC,WAAW,aAAaC,eAxB7D,WAChBY,EAAUpC,EAAKiD,OAAQf,EAAahD,IACpCqD,EAAgBlD,MAuBJ,KAEHiE,IACG,qCACA,cAAC,EAAD,CAAQpE,GAAIgD,EAAa1C,KAAKN,GAAID,MAAOiD,EAAa1C,KAAKP,QAC3D,cAAC,IAAD,CACEuE,MAAO,IAAKhD,SAAUA,EACtBiD,YAAavB,EAAazC,OAAOL,MACjCsE,OAAQ,SAACV,GAAD,OACND,EAAW,CACTY,KAAMX,EAAKY,aACXC,GAAIb,EAAKc,aACTC,UAAW,SAGjB,cAAC,EAAD,CAAQ7E,GAAIgD,EAAazC,OAAOP,GAAID,MAAOiD,EAAazC,OAAOR,WAE/D,qCACA,cAAC,EAAD,CAAQC,GAAIgD,EAAazC,OAAOP,GAAID,MAAOiD,EAAazC,OAAOR,QAC/D,cAAC,IAAD,CACEuE,MAAO,IAAKhD,SAAUA,EACtBiD,YAAavB,EAAa1C,KAAKJ,MAC/BsE,OAAQ,SAACV,GAAD,OACND,EAAW,CACTY,KAAMX,EAAKY,aACXC,GAAIb,EAAKc,aACTC,UAAW,SAGjB,cAAC,EAAD,CAAQ7E,GAAIgD,EAAa1C,KAAKN,GAAID,MAAOiD,EAAa1C,KAAKP,WAG7DsE,KAAYD,IACV,cAAC,EAAD,CAAehC,YAAY,aAAaC,WAAW,YAAYC,eAlDrD,YAClBzB,EAAKjB,QAAUA,GAAyBiB,EAAKqD,eAC7CG,KAAYD,MACdjB,EAAQH,EAAahD,GAAIc,EAAKiD,OAAQ,WAgD5B,KAEJ,cAAC,EAAD,CAAUlD,KAAMmC,EAAclC,KAAMA,EAAMC,YAlFhC,SAAC+D,GACnBjE,EAAKkE,QACLvB,EAAY3C,EAAKjB,OACjBgE,EAAa/C,EAAKjB,OACdkF,GAASxB,EAAYN,EAAahD,e,yCCb3BgF,EAzBU,WAAO,IAAD,EAMzB5B,qBAAW1D,GAJboB,EAF2B,EAE3BA,KACAuC,EAH2B,EAG3BA,gBACA4B,EAJ2B,EAI3BA,eACA1B,EAL2B,EAK3BA,gBAGI2B,EAAY,uCAAG,sCAAAC,EAAA,6DACbC,EAAcC,KAAKC,SAAW,GAAM,QAAU,QAE9CC,EAHa,2BAGE1F,GAHF,IAGiBG,GAAIc,EAAKiD,OAAQ9D,SAAUa,EAAKb,SAAUC,MAAOkF,IAC/EI,EAJa,2BAIMrF,GAJN,IAIuBH,GAAIyF,cAAUnF,KAAMiF,IAJ3C,SAMgBN,EAAeO,GAN/B,gBAMXE,EANW,EAMXA,QAASC,EANE,EAMFA,QACjBD,EAAUrC,EAAgBmC,GAAejC,EAAgBoC,GAPtC,2CAAH,qDAUlB,OACE,qBAAKjF,UAAU,cAAf,SACE,wBAAQO,QAAS,kBAAMiE,KAAvB,4BCsBSU,EAzCE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAClB3C,qBAAW1D,GAArCoB,EAD4C,EAC5CA,KAAMuC,EADsC,EACtCA,gBAgBd,OACE,sBAAK3C,UAAU,YAAf,UACE,cAAC,EAAD,IAC+B,IAA9BsF,OAAOC,KAAKH,GAAOI,OAChB,iDACA,6BACCF,OAAOC,KAAKH,GAAOK,KAAI,SAACC,GAAD,OACtB,qBAEE1F,UAAS,UAAK0F,IAAWP,EAAa,sBAAwB,aAC9D5E,QAAS,kBAxBJ,SAACmF,GACZN,EAAMM,GAAQ9F,KAAKN,KAAOc,EAAKiD,QACjCgC,EAASjF,EAAMsF,GAAQ,GAEzB/C,EAAgByC,EAAMM,IAoBGC,CAASD,IAH1B,kBAKQA,EAAOzF,MAAM,EAAG,GACtB,mCACImF,EAAMM,GAAQ9F,KAAKN,KAAOc,EAAKiD,QAAsC,OAA5B+B,EAAMM,GAAQ7F,OAAOP,GAC5D,wBAAQiB,QAAS,kBAtBtB,SAACmF,GACoB,OAA5BN,EAAMM,GAAQ7F,OAAOP,IACvB+F,EAASjF,EAAMsF,GAAQ,GAEzB/C,EAAgByC,EAAMM,IAkBiBE,CAAKF,IAA5B,kBAAqD,SAPtDA,Y,iBCsDJG,EA5EI,SAACxC,EAAQ9D,EAAUsD,GAAqB,IAAD,EACZf,mBAAS,IADG,mBACjDgE,EADiD,KACjCC,EADiC,OAEhBjE,mBAAS,IAFO,mBAEjDkE,EAFiD,KAEnCC,EAFmC,OAGpBnE,mBAASrC,GAHW,mBAGjDyG,EAHiD,KAGrCC,EAHqC,KAIlDC,EAASC,mBAEftD,qBAAU,WAoBR,OAnBAqD,EAAOE,QAAUC,IAZJ,0BAabH,EAAOE,QAAQE,KAAK,cAAe,CAAEnD,OAAQA,EAAQ9D,SAAUA,IAE/D6G,EAAOE,QAAQG,GAAG,gBAAgB,SAAAC,GAChCX,EAAkBW,MAGpBN,EAAOE,QAAQG,GAAG,gBAAgB,SAACE,GACjCV,EAAgBU,MAGlBP,EAAOE,QAAQG,GAAG,eAAe,SAACG,GAChCT,EAAcS,MAGhBR,EAAOE,QAAQG,GAAG,iBAAiB,SAAAI,GACjChE,EAAgB,kCAGX,WAAQuD,EAAOE,QAAQQ,gBAC7B,CAACzD,EAAQ9D,EAAUsD,IAoCtB,MAAO,CACLiD,iBACAE,eACAzB,eA/BqB,SAACO,GACtB,OAAO,IAAIiC,SAAQ,SAACC,GAClBZ,EAAOE,QAAQE,KAAK,cAAe1B,GAAa,SAACmC,GAC/CD,EAAQ,CAAEhC,QAASiC,EAASC,WAAYjC,QAASgC,EAAShC,iBA6B9D1C,UAxBgB,SAACmD,EAAQyB,GACzBf,EAAOE,QAAQE,KAAK,OAAQd,EAAQyB,IAwBpCjB,aACAb,SAtBe,SAACjF,EAAMsF,EAAQ0B,GAC9BhB,EAAOE,QAAQE,KAAK,YAAapG,EAAMsF,EAAQ0B,IAsB/CxE,YAnBkB,SAAC8C,GACnBU,EAAOE,QAAQE,KAAK,WAAYd,IAmBhClD,UAhBgB,SAACa,EAAQqC,GACzBU,EAAOE,QAAQE,KAAK,aAAcnD,EAAQqC,IAgB1CjD,QAbc,SAACiD,EAAQrC,EAAQgE,GAC/BjB,EAAOE,QAAQE,KAAK,YAAad,EAAQrC,EAAQgE,M,kBCnDtCC,EAfM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aAAc1E,EAAsB,EAAtBA,gBACpC,OACE,mCACE,cAAC2E,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChD5F,KAAuB,KAAjBwF,EAFR,SAIE,cAACK,EAAA,EAAD,CAAOC,QAAS,kBAAMhF,EAAgB,KAAKiF,SAAS,QAApD,SACGP,SCFLjI,EAAKyF,cACL3E,EAAO,CAAEiD,OAAQ/D,EAAIC,SAAS,SAAD,OAAWD,EAAGW,MAAM,EAAG,KAkD3C8H,EAhDH,WAAO,IAAD,EACwBjG,mBAASrC,GADjC,mBACT6C,EADS,KACKK,EADL,OAEwBb,mBAAS,IAFjC,mBAETyF,EAFS,KAEK1E,EAFL,OAcZgD,EAAWzF,EAAKiD,OAAQjD,EAAKb,SAAUsD,GATzCiD,EALc,EAKdA,eACAE,EANc,EAMdA,aACAzB,EAPc,EAOdA,eACAhC,EARc,EAQdA,UACA2D,EATc,EASdA,WACAb,EAVc,EAUdA,SACAzC,EAXc,EAWdA,YACAJ,EAZc,EAYdA,UACAC,EAbc,EAadA,QAYF,OATAM,qBAAU,WACR,IACMmD,EAAW5G,KAAOgD,EAAahD,IACjCqD,EAAgBuD,GAElB,MAAOjD,OAER,CAACiD,IAGF,cAAC,EAAQ8B,SAAT,CAAkBC,MAAO,CAAE7H,OAAMuC,kBAAiB4B,iBAAgB3B,cAAaC,mBAA/E,SACE,sBAAK7C,UAAU,iBAAf,UACE,qBAAKA,UAAU,SACf,sBAAKA,UAAU,OAAf,UACE,8CAAiBI,EAAKb,YACtB,iDAAoB+F,OAAOC,KAAKO,GAAgBN,aAGlD,cAAC,EAAD,CAAUL,WAAY7C,EAAahD,GAAI8F,MAAOY,EAAcX,SAAUA,IAEtE,cAAC,EAAD,CACE/C,aAAcA,EACdC,UAAWA,EACXC,UAAWA,EACXC,QAASA,IAEX,cAAC,EAAD,CAAc8E,aAAcA,EAAc1E,gBAAiBA,UCnDnEqF,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.c40832b3.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nconst Context = createContext()\r\n\r\nexport default Context\r\n","export const fen = {\r\n  startingPosition: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\r\n}\r\n\r\nexport const initialPlayer = {\r\n  time: 0,\r\n  score: 0,\r\n  id: null,\r\n  username: null,\r\n  color: ''\r\n}\r\n\r\nexport const initialGameroom = {\r\n  id: null,\r\n  state: fen.startingPosition,\r\n  winner: null,\r\n  host: initialPlayer,\r\n  player: initialPlayer,\r\n  connections: []\r\n}\r\n","import React from 'react'\r\n\r\nconst Player = ({ id, score }) => {\r\n  return (\r\n    <div className='opposite-container'>\r\n      {id === null ? <p>No opponent connected</p> : <p>Guest#{id.slice(0, 4)}</p>}\r\n      <p>Score: {score}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\n\r\nconst GameOver = ({ game, user, handleReset }) => {\r\n  const gameoverText = `Game over: ${game.winner === 'draw' ? 'draw'\r\n    : (game.winner === user.username ? 'You won' : 'You lost')}`\r\n  return (\r\n    <>{game.winner === null ? null\r\n      : <>\r\n        <p>{gameoverText}</p>\r\n        <button onClick={() => handleReset(true)}>Rematch</button>\r\n        </>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GameOver\r\n","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { ClickAwayListener } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: 'relative'\r\n  },\r\n  dropdown: {\r\n    top: 28,\r\n    right: 0,\r\n    left: 0,\r\n    zIndex: 1,\r\n    border: '1px solid',\r\n    padding: theme.spacing(1),\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}))\r\n\r\nconst ConfirmButton = ({ description, buttonName, acceptFunction }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = useState(false)\r\n  const handleClickAway = () => setOpen(false)\r\n  const handleClick = () => setOpen(!open)\r\n  const handleConfirm = () => {\r\n    handleClickAway()\r\n    acceptFunction()\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <div className={classes.root}>\r\n        <button onClick={handleClick}>{buttonName}</button>\r\n        {open ? (<div className={classes.dropdown}>{description}<button onClick={handleClickAway}>Cancel</button><button onClick={handleConfirm}>Confirm</button></div>) : null}\r\n      </div>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n\r\nexport default ConfirmButton\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport Chess from 'chess.js'\r\nimport Chessboard from 'chessboardjsx'\r\n\r\nimport Context from '../context/Context'\r\nimport { fen, initialGameroom } from '../Constants'\r\nimport Player from './Player'\r\nimport GameOver from './GameOver'\r\nimport ConfirmButton from './ConfirmButton'\r\n\r\nconst game = new Chess()\r\n\r\nconst Game = ({ selectedGame, emitState, emitLeave, emitEnd }) => {\r\n  const { user, setSelectedGame, emitRematch, setErrorMessage } = useContext(Context)\r\n  const [position, setPosition] = useState(fen.startingPosition)\r\n\r\n  const isMyTurn = () => {\r\n    if (user.userID === selectedGame.host.id) {\r\n      return selectedGame.host.color.split('')[0] === game.turn()\r\n    } else if (user.userID === selectedGame.player.id) {\r\n      return selectedGame.player.color.split('')[0] === game.turn()\r\n    }\r\n    return false\r\n  }\r\n\r\n  // useEffect that updates gameboard when selected game is changed\r\n  useEffect(() => {\r\n    try {\r\n      game.load(selectedGame.state)\r\n      setPosition(game.fen())\r\n    } catch (e) {\r\n      setErrorMessage('Failed to load boardstate')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedGame])\r\n\r\n  const broadcastFen = fen => {\r\n    emitState(selectedGame.id, fen)\r\n  }\r\n\r\n  const handleReset = (rematch) => {\r\n    game.reset()\r\n    setPosition(game.fen())\r\n    broadcastFen(game.fen())\r\n    if (rematch) emitRematch(selectedGame.id)\r\n  }\r\n\r\n  const handleMove = (move) => {\r\n    if (isMyTurn() && game.move(move)) {\r\n      setPosition(game.fen())\r\n      broadcastFen(game.fen())\r\n      if (game.game_over()) {\r\n        if (game.in_draw()) {\r\n          emitEnd(selectedGame.id, user.userID, 'draw')\r\n        } else {\r\n          emitEnd(selectedGame.id, user.userID, 'win')\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const leaveGame = () => {\r\n    emitLeave(user.userID, selectedGame.id)\r\n    setSelectedGame(initialGameroom)\r\n  }\r\n\r\n  const imPlayer = () => selectedGame.player.id === user.userID\r\n  const imHost = () => selectedGame.host.id === user.userID\r\n\r\n  const handleSurrender = () => {\r\n    if (game.fen() === fen.startingPosition && !game.game_over()) return\r\n    if (imHost() || imPlayer()) {\r\n      emitEnd(selectedGame.id, user.userID, 'loss')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='center-container'>\r\n      <div>\r\n        {(selectedGame.id === null)\r\n          ? <p>No game selected</p>\r\n          : <>\r\n            <p>{`Game#${selectedGame.id.slice(0, 4)}`}</p>\r\n\r\n            {(imHost() || imPlayer())\r\n              ? <ConfirmButton description='Leave game?' buttonName='Leave game' acceptFunction={leaveGame} />\r\n              : null}\r\n\r\n            {imPlayer()\r\n              ? <>\r\n                <Player id={selectedGame.host.id} score={selectedGame.host.score} />\r\n                <Chessboard\r\n                  width={400} position={position}\r\n                  orientation={selectedGame.player.color}\r\n                  onDrop={(move) =>\r\n                    handleMove({\r\n                      from: move.sourceSquare,\r\n                      to: move.targetSquare,\r\n                      promotion: 'q'\r\n                    })}\r\n                />\r\n                <Player id={selectedGame.player.id} score={selectedGame.player.score} />\r\n              </>\r\n              : <>\r\n                <Player id={selectedGame.player.id} score={selectedGame.player.score} />\r\n                <Chessboard\r\n                  width={400} position={position}\r\n                  orientation={selectedGame.host.color}\r\n                  onDrop={(move) =>\r\n                    handleMove({\r\n                      from: move.sourceSquare,\r\n                      to: move.targetSquare,\r\n                      promotion: 'q'\r\n                    })}\r\n                />\r\n                <Player id={selectedGame.host.id} score={selectedGame.host.score} />\r\n              </>}\r\n\r\n            {(imHost() || imPlayer())\r\n              ? <ConfirmButton description='Surrender?' buttonName='Surrender' acceptFunction={handleSurrender} />\r\n              : null}\r\n\r\n            <GameOver game={selectedGame} user={user} handleReset={handleReset} />\r\n          </>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","import React, { useContext } from 'react'\r\nimport Context from '../context/Context'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { initialPlayer, initialGameroom } from '../Constants'\r\n\r\nconst CreateGameButton = () => {\r\n  const {\r\n    user,\r\n    setSelectedGame,\r\n    emitCreateGame,\r\n    setErrorMessage\r\n  } = useContext(Context)\r\n\r\n  const handleCreate = async () => {\r\n    const randomColor = Math.random() > 0.5 ? 'white' : 'black'\r\n\r\n    const newHost = { ...initialPlayer, id: user.userID, username: user.username, color: randomColor }\r\n    const newGameRoom = { ...initialGameroom, id: uuidv4(), host: newHost }\r\n\r\n    const { success, message } = await emitCreateGame(newGameRoom)\r\n    success ? setSelectedGame(newGameRoom) : setErrorMessage(message)\r\n  }\r\n\r\n  return (\r\n    <div className='create-game'>\r\n      <button onClick={() => handleCreate()}>Create game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateGameButton\r\n","import React, { useContext } from 'react'\r\n\r\nimport Context from '../context/Context'\r\nimport CreateGameButton from './CreateGameButton'\r\n\r\n// TODO: num of players joined and spectating\r\n// if those are not null allow only joining as spectator\r\nconst GameList = ({ selectedID, games, emitJoin }) => {\r\n  const { user, setSelectedGame } = useContext(Context)\r\n\r\n  const spectate = (gameID) => {\r\n    if (games[gameID].host.id !== user.userID) {\r\n      emitJoin(user, gameID, false)\r\n    }\r\n    setSelectedGame(games[gameID])\r\n  }\r\n\r\n  const join = (gameID) => {\r\n    if (games[gameID].player.id === null) {\r\n      emitJoin(user, gameID, true)\r\n    }\r\n    setSelectedGame(games[gameID])\r\n  }\r\n\r\n  return (\r\n    <div className='game-list'>\r\n      <CreateGameButton />\r\n      {Object.keys(games).length === 0\r\n        ? <p>No ongoing games</p>\r\n        : <ul>\r\n          {Object.keys(games).map((gameID) =>\r\n            <li\r\n              key={gameID}\r\n              className={`${gameID === selectedID ? 'highlight clickable' : 'clickable'}`}\r\n              onClick={() => spectate(gameID)}\r\n            >\r\n              Game#{gameID.slice(0, 4)}\r\n              <>\r\n                {(games[gameID].host.id !== user.userID && games[gameID].player.id === null)\r\n                  ? <button onClick={() => join(gameID)}>Join</button> : null}\r\n              </>\r\n            </li>\r\n          )}\r\n        </ul>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameList\r\n","import { useRef, useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport { initialGameroom } from '../Constants'\r\n\r\nconst ENDPOINT = 'http://localhost:3001/'\r\n\r\n/**\r\n * Custom hook that handles moving data between client and server\r\n */\r\nconst SocketHook = (userID, username, setErrorMessage) => {\r\n  const [connectedUsers, setConnectedUsers] = useState([])\r\n  const [currentGames, setCurrentGames] = useState([])\r\n  const [gameUpdate, setGameUpdate] = useState(initialGameroom)\r\n  const socket = useRef()\r\n\r\n  useEffect(() => {\r\n    socket.current = socketIOClient(ENDPOINT)\r\n    socket.current.emit('join server', { userID: userID, username: username })\r\n\r\n    socket.current.on('update users', newUserList => {\r\n      setConnectedUsers(newUserList)\r\n    })\r\n\r\n    socket.current.on('update games', (newGameList) => {\r\n      setCurrentGames(newGameList)\r\n    })\r\n\r\n    socket.current.on('game update', (updatedGame) => {\r\n      setGameUpdate(updatedGame)\r\n    })\r\n\r\n    socket.current.on('connect_error', error => {\r\n      setErrorMessage('Connection to server failed')\r\n    })\r\n\r\n    return () => { socket.current.disconnect() }\r\n  }, [userID, username, setErrorMessage])\r\n\r\n  /**\r\n   * Create game sends newGameRoom object to server\r\n   * Server responses if creation was succesful\r\n   * @param {gameRoom} newGameRoom\r\n   * @returns {boolean}  response.succesful - No errors and user has less than 3 created games\r\n   */\r\n  const emitCreateGame = (newGameRoom) => {\r\n    return new Promise((resolve) => {\r\n      socket.current.emit('create game', newGameRoom, (response) => {\r\n        resolve({ success: response.successful, message: response.message })\r\n      })\r\n    })\r\n  }\r\n\r\n  const emitState = (gameID, newState) => {\r\n    socket.current.emit('move', gameID, newState)\r\n  }\r\n\r\n  const emitJoin = (user, gameID, isPlayer) => {\r\n    socket.current.emit('join game', user, gameID, isPlayer)\r\n  }\r\n\r\n  const emitRematch = (gameID) => {\r\n    socket.current.emit('new game', gameID)\r\n  }\r\n\r\n  const emitLeave = (userID, gameID) => {\r\n    socket.current.emit('leave game', userID, gameID)\r\n  }\r\n\r\n  const emitEnd = (gameID, userID, result) => {\r\n    socket.current.emit('game over', gameID, userID, result)\r\n  }\r\n\r\n  return {\r\n    connectedUsers,\r\n    currentGames,\r\n    emitCreateGame,\r\n    emitState,\r\n    gameUpdate,\r\n    emitJoin,\r\n    emitRematch,\r\n    emitLeave,\r\n    emitEnd\r\n  }\r\n}\r\n\r\nexport default SocketHook\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core'\r\nimport { Alert } from '@material-ui/lab'\r\n\r\nconst ErrorMessage = ({ errorMessage, setErrorMessage }) => {\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        open={errorMessage !== ''}\r\n      >\r\n        <Alert onClose={() => setErrorMessage('')} severity='error'>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport Context from './context/Context'\r\nimport Game from './components/Game'\r\nimport './styles/App.css'\r\nimport GameList from './components/GameList'\r\nimport SocketHook from './service/SocketHook'\r\nimport { initialGameroom } from './Constants'\r\nimport ErrorMessage from './components/ErrorMessage'\r\nconst id = uuidv4()\r\nconst user = { userID: id, username: `Guest#${id.slice(0, 4)}` }\r\n\r\nconst App = () => {\r\n  const [selectedGame, setSelectedGame] = useState(initialGameroom)\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n\r\n  const {\r\n    connectedUsers,\r\n    currentGames,\r\n    emitCreateGame,\r\n    emitState,\r\n    gameUpdate,\r\n    emitJoin,\r\n    emitRematch,\r\n    emitLeave,\r\n    emitEnd\r\n  } = SocketHook(user.userID, user.username, setErrorMessage)\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (gameUpdate.id === selectedGame.id) {\r\n        setSelectedGame(gameUpdate)\r\n      }\r\n    } catch (e) { }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [gameUpdate])\r\n\r\n  return (\r\n    <Context.Provider value={{ user, setSelectedGame, emitCreateGame, emitRematch, setErrorMessage }}>\r\n      <div className='grid-container'>\r\n        <div className='icon' />\r\n        <div className='user'>\r\n          <p>logged in as {user.username}</p>\r\n          <p>players online: {Object.keys(connectedUsers).length}</p>\r\n        </div>\r\n\r\n        <GameList selectedID={selectedGame.id} games={currentGames} emitJoin={emitJoin} />\r\n\r\n        <Game\r\n          selectedGame={selectedGame}\r\n          emitState={emitState}\r\n          emitLeave={emitLeave}\r\n          emitEnd={emitEnd}\r\n        />\r\n        <ErrorMessage errorMessage={errorMessage} setErrorMessage={setErrorMessage} />\r\n      </div>\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}